; entire macro for authentication process
[macro-auth]
; accept the name of subrequest (customer name, cvv code etc.)
exten => s,1,Playback(sip_response/asterisk/auth_${ARG1})
same => n,Record(sip_response/workflow/auth/${request_id}:${file_extension},5,10,q)
same => n,Set(module_call=auth)
same => n,Set(auth_subrequest=${ARG1})
same => n,AGI(sip_response/main.py)
same => n,GotoIf($[ "${auth_result}" = "failed" ]?auth_failed)
same => n,GotoIf($[ "${auth_result}" = "redirect" ]?redirect)
same => n,MacroExit()
; go back if authentication failed
same => n(auth_failed),Playback(sip_response/asterisk/auth_failed)
same => n,Goto(s,1)
; redirect to specialist if there is more than 2 attempts
same => n(redirect),Playback(sip_response/asterisk/redirect)
same => n,Dial(SIP/caller)
;call the logging in case of hangup
[log]
exten => s,1,Set(module_call=log)
same => n,AGI(sip_response/main.py)
same => n,Hangup

[phones]

exten => 100,1,NoOp(Call for caller)
same => n,Playback(sip_response/asterisk/intro)
same => n,Dial(SIP/caller)
same => n,Hangup

exten => 88005553535,1,NoOp(Test call)

; set flags for condition determination
same => n,Set(CHANNEL(language)=ru)
same => n,Set(request_flag=0)
same => n,Set(keyword_flag=0)
same => n,Set(reform_flag=0)
same => n,Set(auth_failed_flag=0)
; generate call ID
same => n,Set(request_id=request_${RAND()})
; set recorded files format
same => n,Set(file_extension=wav)

; hangup handler
same => n,Set(CHANNEL(hangup_handler_push)=log,s,1)

; first guess what is the user request
same => n,Playback(sip_response/asterisk/intro)
same => n(request),Record(sip_response/workflow/requests/${request_id}:${file_extension},5,10,q)
same => n(post_request),Set(module_call=request)
same => n,AGI(sip_response/main.py)
same => n,GotoIf($[ "${response}" = "reform" ]?reform)
same => n,GotoIf($[ "${response}" = "redirect" ]?redirect)
same => n,Playback(sip_response/workflow/responses/${request_id}_response)

; generate request and ask is it true or not
same => n(guess_main),Record(sip_response/workflow/guesses/${request_id}:${file_extension},3,6,q)
same => n,Set(module_call=guess)
same => n,AGI(sip_response/main.py)
same => n,GotoIf($[ "${guess}" = "no" ]?post_request)
same => n,GotoIf($[ "${guess}" = "unrecognized" ]?guess)
same => n,GotoIf($[ "${guess}" = "reform" ]?reform)
same => n,GotoIf($[ "${guess}" = "redirect" ]?redirect)
same => n,NoOp(Guess OK)

; run 4 authentication steps
same => n(auth_name),Macro(auth,name)
same => n(auth_cc_numbers),Macro(auth,cc_numbers)
same => n(auth_cvv),Macro(auth,cvv)
same => n(auth_card_code),Macro(auth,card_code)

; make an answer
same => n,Playback(sip_response/asterisk/auth_finished)
same => n,Set(module_call=answer)
same => n,AGI(sip_response/main.py)
same => n,GotoIf($[ "${answer}" = "failed" ]?redirect)
same => n,Playback(sip_response/workflow/answers/${request_id}_answer)

; ask does the customer have any more questions
same => n,Playback(sip_response/asterisk/one_more)
same => n(guess_last),Record(sip_response/workflow/guesses/${request_id}:${file_extension},3,6,q)
same => n,Set(module_call=guess)
same => n,AGI(sip_response/main.py)
same => n,GotoIf($[ "${guess}" = "no" ]?finish)
same => n,GotoIf($[ "${guess}" = "unrecognized" ]?guess2)
same => n,GotoIf($[ "${guess}" = "yes" ]?new_request)

; if answer cannot be recognized
same => n(guess),Playback(sip_response/asterisk/yes_or_no)
same => n,Goto(guess_main)

same => n(guess2),Playback(sip_response/asterisk/yes_or_no)
same => n,Goto(guess_last)

; ask to reform request
same => n(reform),Playback(sip_response/asterisk/request_reform)
same => n,Goto(request)

; support redirect
same => n(redirect),Playback(sip_response/asterisk/redirect)
same => n,Dial(SIP/caller)
same => n,Goto(log,s,1)

; come back to process request the second time
same => n(new_request),Playback(sip_response/asterisk/new_request)
same => n,Goto(request)

; say goodbye
same => n(finish),Playback(sip_response/asterisk/outro)
same => n,Goto(log,s,1)
